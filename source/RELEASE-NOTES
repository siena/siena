Siena release notes:
We will try to keep tracks of modifications from now.
The github issues are not traced because  

v1.0.0-b5
----------------------------------------------------------
Third draft of v1.0.0 with bug fixes and code optimization

== BUG FIXES ==
* correction in LifecyclePhase to be able to call private functions.

* Json bug correction: Date field without format was not managed at all

== ENHANCEMENTS ==
* added ClassInfo.queryAndAllFields containing the allFields
(insert/update/keys) + the autoquery fields + inherited fields -
filtered inherited fields

* added Model.getByKey(Class<R> clazz, Object key) because it's really practical :)

* added PersistenceManager.beginTransaction() without isolationLevel
because default parameter the right one.

* created transaction.textile doc

* tested transaction management for SQL + GAE

* minor modification to close all resultsets+statements in doFetchXXX

* modified BigDecimal impl by allowing
@DecimalPrecision(storateType=NATIVE/DOUBLE/STRING, size=23, scale=4)

* added support for BigDecimal (stored as Decimal in SQL
and String in GAE) + @DecimalPrecision annotation for SQL since it is
required to create the right table mapping.

* Embedding bug correction: for Query and @EmbedIgnore, it returned
exactly the opposite boolean in mustIgnore.

* @EmbedIgnore correction: removed the unneeded value()

v1.0.0-b4
----------------------------------------------------------
Third draft of v1.0.0 with bug fixes and code optimization

== BUG FIXES ==
* GAE: bug correction for GaeMappingUtils.getKey with a NULL key
value (now returns null)

* JDBC: bug correction in stateful mode, if the statement is
closed, it is rebuilt from scratch (added QueryOptionJdbcContext.isClosed 
function)

* correction in Postgres search, don't coalesce number/date fields


== ENHANCEMENTS ==
* added model inheritance management (table per concrete class mode) +
documentation

* Query is now ignored in Json serialization

* new @EmbedIgnore to ignore a field from Json serialization

* added all stuff for Query JSON dump/restore (might evolve in the
future) + unit tests

* QueryData extends Serializable to make a Query serializable

* added ClassInfo.isGenerated function

* modified H2 FullText to prevent from having duplicated indexes table
names.

* modified DDLGenerator to take into account differences between
H2/MySQL and MySQL


v1.0.0-b3
----------------------------------------------------------
Third draft of v1.0.0 with bug fixes and code optimization

== BUG FIXES ==

* JSonSerializer bug correction: was unable to deserialize a null Enum

* corrected a bug in JsonSerializer: deserializePlain crashed when the
data was null but the type was a Number. Now returns 0

* fix an issue about @Join : when the field with the @Join is null, the 
GAE key is not computed and so you don't get an NPE

== ENHANCEMENTS ==
* added LifeCycle Pre/Post+Fetch/Insert/Update/Delete/Save annotations
to annotate a Model method : the methods are triggered only for single
model features (get/insert/update/save/delete) but not query/batch for
the time being.

* added a new PersistenceManagerLifeCycleWrapper: a PersistenceManager
proxy adding LifeCycle annotation management on top of a PM.

* changed default column name generation when there is no @column:
uses the field name by default and if it is a Model with several keys,
uses "fieldName_keyName1", "fieldName_keyName2"... + unit test.

* added "save" functions to GAE Async + unit tests.

* added embedded model management: if you create an @Embedded relation
field on an existing model (annotated with @EmbeddedList/Map), the
model object is serialized into JSON into the field.

* added new @polymorphic annotation to notice a field is a generic
field. In SQL DB, the field is mapped to a BLOB column and serialized
using Java object native serialization. In GAE, it is managed
natively by GAE. ** note that @polymorphic is not required in GAE
but strongly advised for portability **

* added missing functions to async: getByKey/iterPerPage + some util
classes for it

* H2 impl : fulltext search in H2 is really tricky and buggy so I
duplicated the FullText classes in Siena to control exactly what
happens. This part of H2 impl should be reconsidered later as it
builds dynamic Index and this is not very robust and optimized.

* MYSQL/Postgres impl: restricted search to one single search per
query because current code doesn't allow it yet (H2 can do it because
it's completely different)

* new H2PersistenceManager for H2 Database taking into account its
specificities (SQL MERGE and search)

* added getByKey function to retrieve an entity by its primary key
(when the key is not multiple)

* added @entity annotation to make bytecode enhancement easier and
more compliant to other frameworks

* added save(Object)/save(Object...)/save(Iterable<T>) functions:
insert or update

* SQL DDL modification: @max with value doesn't generate an exception
anymore by sets the default value to 255

* Postgres impl is complete

* implemented Batch.update(...) for JDBC/GAE/GAE_ASYNC

* enhanced JDBC join to manage multiple join annotations (on several
fields) using aliases

* JDBC join is now INNER LEFT JOIN to retrieve even null fields

* JDBC : changed SQL params from "field" to "tablename.field" in
SQL requests



v1.0.0-b2
----------------------------------------------------------
Second draft of v1.0.0 with bug fixes and code optimization

== BUG FIXES ==
* @Id without Generator.XXX works now: it is now by default Generator.AUTO_INCREMENT but for String, this is just skipped

== ENHANCEMENTS ==
* added query.limit(int)/query.offset(int) functions
* changed the pagination/limit/offset management to make it fully homogeneous between JDBC/GAE sync/async and in fetch/fetchKeys/iter functions



v1.0.0-b1
----------------------------------------------------------
First draft of v1.0.0 with all incoming features:
    * asynchronous mode for GAE (JDBC will come soon)
          o based on Java Future concept
          o maps all existing and also new synchronous APIs to asynchronous APIs

    * stateless/stateful queries (stateless is the default mode and the one you already know)
          o for those who reuse queries several times and keep the query context between 2 calls
          o means the cursors, offsets are kept alive between calls
          o provided for JDBC based on prepared statements reuse
          o provided for GAE based on GAE cursors reuse
          o can be mixed with asynchronous mechanism
          o mechanism of dump/restore of stateful queries in order to be able to restore a query context later (very useful for pagination for example)

    * pagination for JDBC/GAE forward/backward

    * iteration for JDBC/GAE in synchronous/asynchronous mode 
          o allowing to realize the mapping from DB objects to Java objects dynamically when a new iteration is done and not at once after DB extraction
          o available for pagination also

    * batch mode for GAE/JDBC
          o provides select/update/insert/delete in batch mode allowing requests on many entities at once

    * java enum are well managed now
    * primary keys can be Long/String/UUID for GAE/JDBC
    * join mechanism for JDBC and simulated for GAE (need some more reflections on this based on GAE groups but it already works even if it might not be optimized)
    * search for GAE/JDBC
          o for GAE, it is really simple search with respect to limitations of GAE (don't imagine ElasticSearch or Solr but anyway, it's practical sometimes)
          o for JDBC, the search can be customized according to the DB because it is one of the main feature which is not really portable between MySQL and Postgres but basic code will work on both side (and on GAE also).
