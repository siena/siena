h1. Write your first Siena model

You've never written a model, here is the simplest model:

h2. <a name="code">The Code first</a>

h3. <a name="model">The Model</a>

bc.. public class Person extends Model {

	@Id
	public Long id;
	
	public String firstName;
	
	public String lastName;
}
	
p. 

h3. <a name="model_insert">Create an entity & Persist it</a>

bc.. Person bob = new Person();
bob.firstName = "Bob";
bob.lastName = "Smith"
bob.insert(); 

p. 

h3. <a name="model_update">Retrieve your entity using the get() function & update it</a>

bc.. Person bob2 = new Person();
bob2.id = bob.id;
bob2.get(); // extracts bob and fills the fields firstName/lastName
bob2.firstName = "bob2";
bob2.update();

p. 

h3. <a name="model_update2">Retrieve your entity by the name & update it</a>

bc.. Person bob3 = Model.all(Person.class).filter("firstName", "Bob").get();
bob3.firstName = "bob3";
bob3.update();

p. 

h3. <a name="model_delete">Retrieve your entity by the id directly & delete it</a>

bc.. Person bob4 = Model.getByKey(Person.class, bob.id);
bob4.delete();

p. 

==<br/>==

h2. <a name="to_be_noted">To be noted</a>

* ==<b>class Person extends Model</b>==

bq. Want to know why extending siena.Model is advised, go "there":./why_extends_model.textile

 
* ==<b>@Id annotation</b>==
It allows to identify the primary key or the unique identifier in your model.

bq. Want to know more about @Id options, go "there":./annotation_Id.textile 
 

==<br/>==

h2. <a name="go_further">Go a bit Further</a>

h3. <a name="go_further_self_aware">Make your model class a bit more __"self-aware"__</a>

bq. Siena implements the <a href="http://en.wikipedia.org/wiki/Active_record_pattern">Active Record pattern</a> which aims at considering the model as the center of the persistence mechanism and not just a data container as in the <a href="http://en.wikipedia.org/wiki/Data_access_object">Data Access Object (DAO) pattern</a> where the model contains only the data and the DAO the business logic to "CRUDify" your entities. 
So, in Siena, your model contains both the data and the business logic. Briefly, the model knows itself and what to do to manage itself. I really like the "human aspect" of this design.
So you can make your class a bit more interesting than just a data structure aka POJO in Java as you generally do when using JPA/Hibernate.

Look at the following enhancements of Person class:

bc.. public class Person extends Model {

	@Id
	public Long id;
	
	public String firstName;
	
	public String lastName;

	public Person(String firstName, String lastName){
		this.firstName = firstName;
		this.lastName = lastName;
        }

	public Person(){
	}

	public Person(Long id){
		this.id = id;
	}

	public static Query<Person> all() {
		return Model.all(Person.class);
	}

	public static Person findById(Long id) {
		return Model.getByKey(Person.class, id);
	}

	public static Person findByFirstName(String firstName){
		return all().filter("firstName", firstName).get();
	}
	
	public String toString() {
		return "id:"+id+" - firstName:"+firstName+" - lastName:"+lastName;
	}
}

p. Some explanations:

* ==<b>Person(String firstName, String lastName)</b>==
This is a specific constructor allowing to construct in an elegant way your models when you need to insert them into the datastore.

bc.. Person bob = new Person("Bob", "Smith"); 
bob.insert();

p. 

* ==<b>Person() default constructor</b>==

p(note). *Note* If you define specific constructor as herebefore, it's *mandatory to define a default constructor* because Siena requires it to instantiate your models.
  

* ==<b>Person(Long id)</b>==
This is a specific constructor which is useful to retrieve models from the datastore.

bc.. Person bob2 = new Person(bob.id); 
bob2.get();

p. 

* ==<b>public static Query<Person> all()</b>==
This function is a simpler version of the @Model.all(Class<?>)@ function. 
It gives access to the very important query features.
It is just a convenience and is not required at all because you can call directly Model.all(Person.class) in your code.

bc.. Person bob3 = Person.all().filter("firstName", "Bob").get();

p. 

* ==<b>static Person findById(Long id)</b>== and ==<b>static Person findByFirstName(String firstName)</b>==
These are just utility functions simplifiying the retrieval of a Person by its ID or by its name. It makes your code clearer and uncorrelated from Siena also.

bc. Person bob3 = Person.all().filter("firstName", "Bob").get();

becomes:

bc. Person bob3 = Person.findByFirstName("Bob");

* ==<b>String toString()</b>==
No comment

==<br/>==

h3. <a name="go_further_private">Modify your model into a classical POJO with setter/getters</a>

Some people don't like the __public__ modifier for class fields since it gives direct access to the data without any control on it and without being able to change the behavior of the accessors which is sometimes useful and also safer when you want to distribute your code or extend it. 

That's why the traditional way is to expose the class fields with the well known getter/setter accessors which pollute most of our Java code.

You can naturally do it in Siena and you class would then look like:


bc.. public class Person extends Model {

	@Id
	private Long id;
	
	private String firstName;
	
	private String lastName;

	public Person(String firstName, String lastName){
		this.firstName = firstName;
		this.lastName = lastName;
        }

	public Person(){
	}

	public Person(Long id){
		this.id = id;
	}

	public static Query<Person> all() {
		return Model.all(Person.class);
	}

	public static Person findById(Long id) {
		return Model.getByKey(Person.class, id);
	}

	public static Person findByFirstName(String firstName){
		return all().filter("firstName", firstName).get();
	}

	public getId() {
		return id;
	}

	public setId(Long id){
		this.id = id;
	}

	public getFirstName(){
		return firstName;
	}

	public setFirstName(String firstName){
		this.firstName = firstName;
	}

	public getLastName(){
		return lastName;
	}

	public setLastName(String lastName){
		this.lastName = lastName;
	}
}

p(note). *Note* Nevertheless if your model is just meant to represent some structured data, using __public__ modifier is not something bad at all and makes your code really clear.


h2. <a name="query">Want to make your model aware of others</a>

Generally, you don't design a model to stay alone on an isolated island: a model is meant to reference, own, depend on other models.

here is the most simple example (and also not so interesting one): the *referenced entity* 
a Person has a friend so a Person contains a reference to another Person.

bc.. public class Person extends Model {

	@Id
	public Long id;
	
	public String firstName;
	
	public String lastName;
	
	public Person friend;	
}

p. *Note* the __friend__ will simple contain a reference to another Person object.

A small example to create a friend and retrieve it:

bc.. // creates bob
Person bob = new Person("Bob", "Smith");
bob.insert();

// creates john and bob as a friend a john
Person john = new Person("John", "Doe");
john.friend = bob;
john.insert();

// rRetrieves john and its friend
Person johnbis = Model.getByKey(Person.class, john.id);

// Here Siena hasn't filled the full _friend_ Person object but just it's ID.
assert(johnbis.friend.id != null);
assert(johnbis.friend.firstName == null);
assert(johnbis.friend.lastName == null);
// This is due to the fact that NoSQL databases don't provide JOIN features
// Siena doesn't try to do too many things in your back
// So you need another request to get the full friend object  
Person bobbis = johnbis.friend.get();
assert(johnbis.friend.id != null);
assert(johnbis.friend.firstName != null);
assert(johnbis.friend.lastName != null);

p. *Note* When you fetch a Person, the __friend__ field is not filled completely but just its ID. Why? Because Siena doesn't try to do a JOIN if you don't require it and, more important, because NoSQL databases generally don't provide JOIN features. That's why, as the friend ID is stored within the Person, that's only what can be retrieved in a single query. If you want the full friend object, you need to get it explicitly.


bq. Do you want to know how to create/insert/update/delete such model?
Do you want to create other kind of relations?
Go "there":./relation_home.textile  


h2. <a name="query">A glance at the possibilities of Queries? </a>

You can get a query on your class using the @all(Class<?>)@ function:

bc. Query<Person> query = Model.all(Person.class);

The Query<T> allows to perform all basic operations on entities:
* fetch (potentially by keys only)
* iterate
* delete
* update
* ...

using:

* filters,
* orders, 
* pagination
* ...

p(note). *Note* The *Query<T>* object is reusable (and stateless by default) so if you need to perform several queries at the row, don't hesitate to reuse the same query object.

bq. <b>Query<T> provides lots of features so if you want to know more, go <a href="./query.textile">there</a>.</b>

Here is just a few examples to give a few ideas:

h3. <a name="query_insert">Insert a few persons into the datastore to be able to query them.</a>

bc.. List<Person> persons = new ArrayList<Person>();
for(int i=0; i<100; i++){
	persons.add(new Person("Bob"+i, "Smith"+i));
}

Model.batch(Person.class).insert(persons);

p. Here you see something new: the *Batch* is a useful feature introduced of Siena v1.0.0 which allows to manipulate entities in batch. We will not explain it here so just note it exists.

bq. <b>If you want to know more about Batch<T>, go <a href="./batch.textile">there</a>.</b>
 
h3. <a name="query_fetch">Fetch all persons in one query</a>

bc.. Query<Person> query = Person.all();
List<Person> allPersons = query.fetch();

p. 

h3. <a name="query_fetch">Fetch the first 10 persons</a>

bc.. // Note we reuse the same query created before
List<Person> persons_0_10 = query.fetch(10);

p. 

h3. <a name="query_fetch_offset">Fetch 10 persons beginning at the 25th</a>

bc.. List<Person> persons_25_35 = query.fetch(10, 25);
// You can also write
List<Person> persons_25_35_bis = query.limit(10).offset(25).fetch();

p. 

h3. <a name="query_fetch_paginate">Fetch the persons by page of 10</a>

bc.. // the first 10 persons 
List<Person> persons_by_10 = query.paginate(10).fetch();
// the persons from 10 to 20
persons_by_10 = query.nextPage().fetch();
// the persons from 20 to 30
persons_by_10 = query.nextPage().fetch();
// Again the persons from 20 to 30
persons_by_10 = query.nextPage().fetch();

// NOW GO BACK 
// the persons from 10 to 20
persons_by_10 = query.previousPage().fetch();
// GO BACK the persons from 0 to 10
persons_by_10 = query.previousPage().fetch();
// GO BACK again and retrieve NO person as it is the beginning
persons_by_10 = query.previousPage().fetch();
assert persons_by_10.isEmpty();

p. 

h3. <a name="query_fetch_filter_fetch">Fetch the person created after "bob18"</a>

bc.. List<Person> persons_sup_18 = query.filter("id>", persons.get(18).id).fetch();

p. 

h3. <a name="query_fetch_filter_get">Fetch the person created with name "Bob67"</a>

bc.. Person bob67 = query.filter("firstName", "Bob67").get();

p. 

h3. <a name="query_fetch_paginate">Iterate through the persons</a>

bc.. Iterate<Person> iter = query.iter();

for(Person person: iter) {
System.out.println(person);
}

while(iter.iterator().hasNext()){
System.out.println(iter.next());
}

p. 

h3. <a name="query_fetch_paginate">Iterate through the persons per page of 10</a>

bc.. // this feature is interesting when you have thousands of entities because you can iterate on all entities 
// while Siena takes care of just fetching the entities 10 by 10.
Iterate<Person> iter = query.iterPerPage(10);

for(Person person: iter) {
System.out.println(person);
}

while(iter.iterator().hasNext()){
System.out.println(iter.next());
}

p. 

h3. <a name="query_count">Count the number of persons with firstName "Bob6x"</a>

bc.. int count = query.filter("id>=", persons.get(60).id).filter("id<", persons.get(70).id).count();

p. 

h3. <a name="query_fetch_delete">Delete the persons created after "bob18"</a>

bc.. int nb_deleted = query.filter("id>", persons.get(18).id).delete();

p. 
