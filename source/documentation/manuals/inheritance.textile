h1. Siena Inheritance

In Siena, you can inherit a model from another one.

h2. <a>Inheritance Code sample</a>

Here is a superclass:

bc.. @Table("people_long_auto_model")
public class PersonLongAutoIDModel extends Model {

	@Id(Generator.AUTO_INCREMENT)
	public Long id;
	
	@Column("first_name") @Max(100)
	public String firstName;
	
	@Column("last_name") @Max(100)
	public String lastName;
	
	@Max(100)
	public String city;
	
	public int n;
	
	...
}
	
p. Now here is a subclass extending superclass:

bc.. @Table("people_long_auto_extended")
public class PersonLongAutoIDExtended extends PersonLongAutoIDModel {

	@Max(100)
	public String dogName;
	
	@Column("boss") @Index("boss_index")
	public PersonLongAutoIDModel boss;
    
	@Filter("boss")
	public siena.Query<PersonLongAutoIDExtendedFilter> employees;
           
	@Embedded
	public Image profileImage;
    
	@Embedded
	public List<Image> otherImages;

	@Embedded
	public Map<String, Image> stillImages;
    
	@EmbeddedMap
	public static class Image {
		public String filename;
		public String title;
	}
    
    ...
}

p. 

h2. <a>How inheritance is managed by Siena?</a>

Hibernate proposes 3 main modes to manage inheritance (see "here":http://docs.jboss.org/hibernate/core/3.3/reference/en/html/inheritance.html)
* the __Table per class hierarchy__ mode: the fields of the superclass and subclassES are stored within the same table. You have a big table with lots of fields.
* the __Table per subclass__ mode: each subclass has its own table containing only the fields of the corresponding class with a primary key association to subclass table.
* the ___Table per concrete subclass__ mode: the superclass has its own table (if required) with the fields of the superclass and each subclass has also its own table containing the fields of both subclass and superclass.

Siena is not meant to mimic Hibernate in any case and as the inheritance feature is still young in Siena, we decided to keep it as simple and straightforward as possible.
Thus, **Siena implements only the __Table per concrete subclass__ mode** for the time being.

So for previous code samples, Siena will create 2 tables:
* Table ==<i>people_long_auto_model</i>==
* Table ==<i>people_long_auto_extended</i>==

|_.Table people_long_auto_model|_.Table people_long_auto_extended|
|id|id|
|firstName|firstName|
|lastName|lastName|
|city|city|
|n|n|
| |dogName|
| |boss|
| |profileImage|
| |stillImages|
| |otherImages|

p(note). **Note** The __people_long_auto_extended__ table contains the fields of the superclass and its own fields.

p(note). **Note** The field __employees__ doesn't appear in __people_long_auto_extended__ table as it's an __"automatic query"__ which shall not represented in the DB (child entities are linked to parent through the __boss__ field.


h2. <a>The SuperClass as a simple field container using __abstract__ modifier</a>

p. Sometimes you will need to create a superclass that is just a container class containing fields but not represented in the DB by any table. 
This is useful when you want to put some generic fields in your superclass and reuse them in several subclasses.
It is possible to do this is in Siena by just using the class modifier __abstract__

bc.. public abstract PersonLongAutoIDModel extends Model {

	@Id(Generator.AUTO_INCREMENT)
	public Long id;
	
	@Column("first_name") @Max(100)
	public String firstName;
	
	@Column("last_name") @Max(100)
	public String lastName;
	
	@Max(100)
	public String city;
	
	public int n;
	
	...
}

p(note). **Note** the ==<code>@Table</code>== annotation is not required as it won't be interpreted by Siena. 

In this case, Siena only creates one table:
* Table ==<i>people_long_auto_extended</i>==

|_.Table people_long_auto_extended|
|id|
|firstName|
|lastName|
|city|
|n|
|dogName|
|boss|
|profileImage|
|stillImages|
|otherImages|


h2. <a>Filtering inherited fields</a>

With Siena, you can also choose the fields from superclass that you want to store in the table of subclass. 
Naturally, the subclass in the Java scope will inherit all fields from superclass but with this __filtering__ mechanism, some fields from superclass can be removed by Siena from mapping.

For this, use the annotation <code>@InheritFilter(removedFields={})</code>
the __removedFields__ parameter is a list of strings containing the names of the fields to remove from superclass (or superclasses if your inheritance hierarchy is deeper than 1 level).

h3. @InheritFilter code sample

bc.. @Table("people_long_auto_extended_filter")
@InheritFilter(removedFields={ "city", "n"})
public class PersonLongAutoIDExtendedFilter extends PersonLongAutoIDModel {

	@Max(100)
	public String dogName;
	
	@Column("boss") @Index("boss_index")
	public PersonLongAutoIDModel boss;
    
	@Filter("boss")
	public siena.Query<PersonLongAutoIDExtendedFilter> employees;
           
	@Embedded
	public Image profileImage;
    
	@Embedded
	public List<Image> otherImages;

	@Embedded
	public Map<String, Image> stillImages;
    
	@EmbeddedMap
	public static class Image {
		public String filename;
		public String title;
	}
    ...
}

p. In this case, fields __city__ and __n__ from superclass will be ignored by siena mapping.
So, the table ==<i>people_long_auto_extended_filter</i>== would look like:

|_.Table people_long_auto_extended_filter|
|id|
|firstName|
|lastName|
|dogName|
|boss|
|profileImage|
|stillImages|
|otherImages|

The __PersonLongAutoIDExtendedFilter__ instances in JAVA naturally have those __city__ and __n__ fields but when you retrieve a __PersonLongAutoIDExtendedFilter__ from DB:
* __city__ will be __null__ (as any Object field filtered)
* __n__ will be 0 (as any Number field filtered)
